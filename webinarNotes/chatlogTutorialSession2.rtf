{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 From Kevin Paul to Everyone: (1:04 PM)\
\
https://ncar.github.io/python-tutorial/tutorials/yourfirst.html#creating-a-data-dictionary\
It\'92s above!\
\
From Nan Rosenbloom to Everyone: (1:08 PM)\
\
Do you always need to activate the environment within the subdirectory?\
\
From Kevin Paul to Everyone: (1:09 PM)\
\
No.  You can activate it anywhere.\
\
From Nan Rosenbloom to Everyone: (1:09 PM)\
\
thx\
\
From Kevin Paul to Everyone: (1:09 PM)\
\
You\'92re welcome!\
\
From Swarnali to Everyone: (1:09 PM)\
\
can the terminal screen be zoomed in a little more\
thanks\
\
From Daniele Visioni to Everyone: (1:10 PM)\
\
command plus +\
increases size\
\
From Osinachi Ajoku to Everyone: (1:10 PM)\
\
Command and +\
\
From Gunter Leguy to Everyone: (1:10 PM)\
\
command+\
\
From kong97@purdue.edu to Everyone: (1:10 PM)\
\
I forgot the environment name that I set up last time. How should I find out?\
\
From Brianna to Everyone: (1:11 PM)\
\
conda env list\
\
From kong97@purdue.edu to Everyone: (1:11 PM)\
\
Thanks!\
\
From Swarnali to Everyone: (1:11 PM)\
\
thanks!!\
\
From Colleen Petrik to Everyone: (1:12 PM)\
\
I can\'92t see the left-most side of Julia\'92s screen\
\
From Jeff DLB to Everyone: (1:13 PM)\
\
What is practical difference between\
datafile = open(filename, 'r')\uc0\u8232 data = datafile.read() vs\
with open(filename, 'r') as datafile:\uc0\u8232    data = datafile.read()\
\
From Kevin Paul to Everyone: (1:13 PM)\
\
Datafile is a File object that has a \'93read\'94 method attached to it.\
\
From Kevin Paul to Everyone: (1:14 PM)\
\
\'93with open\'94 is a context manager that closes the file for you once the code in the indented block is finished.\
\
From perrotta to Everyone: (1:14 PM)\
\
If you have multiple for loops in a script can the  \'93_\'94 be used in then all?\
\
From Kevin Paul to Everyone: (1:14 PM)\
\
No.\
You need a different variable in all, or you will overwrite/shadow the previous definition.\
\
From Swarnali to Everyone: (1:14 PM)\
\
can we use tab instead of the 4 spaces?\
\
From perrotta to Everyone: (1:14 PM)\
\
is that to say must all be unique\
\
From Kevin Paul to Everyone: (1:14 PM)\
\
No.  Don\'92t use tab.\
Unless your editor replaces tabs with spaces.\
\
From Daniele Visioni to Everyone: (1:15 PM)\
\
no end to the for loop?\
\
From Colleen Petrik to Everyone: (1:15 PM)\
\
Can you move your terminal to the right some?\
\
From Kevin Paul to Everyone: (1:15 PM)\
\
No.  It ends with the end of the indented text.\
\
From Mariana Gandra to Everyone: (1:16 PM)\
\
Why running the comand datafile.readline() after the print?\
\
From Kevin Paul to Everyone: (1:16 PM)\
\
Colleen, she can\'92t.  She is sharing the terminal.  I don\'92t know why it is displaying as it does on your machine.\
\
From Liv Herdman to Everyone: (1:16 PM)\
\
I can see it fine\
\
From Kevin Paul to Everyone: (1:16 PM)\
\
Mariana, after \'93print\'94?\
\
From haiyingx to Everyone: (1:16 PM)\
\
Colleen, if you zoom out your zoom screen, can you see it?\
\
From Nick Lybarger to Everyone: (1:16 PM)\
\
if you change "view options" at the top of the Zoom app you may get an option that works for you Colleen\
\
From Colleen Petrik to Everyone: (1:17 PM)\
\
I see it now without doing anything. Thanks.\
\
From Kevin Paul to Everyone: (1:17 PM)\
\
Ha!  I\'92m glad whatever worked.  :-)\
\
From yfan to Everyone: (1:18 PM)\
\
Is the \'93line\'94 in for statement related to the line in line.split()\
\
From Kevin Paul to Everyone: (1:18 PM)\
\
Yes.  The \'93line\'94 variable is a string.\
\
From Mariana Gandra to Everyone: (1:18 PM)\
\
Yes, after the print (_)\
\
From Annareli Morales to Everyone: (1:18 PM)\
\
Why don\'92t we have to add the _ into the datafile.readline()?\
\
From Kevin Paul to Everyone: (1:18 PM)\
\
I can\'92t keep up with everyone\'92s questions.  Can you save them til the end?\
\
From Nick Lybarger to Everyone: (1:19 PM)\
\
annareli the readline function iterates automatically\
\
From Kevin Paul to Everyone: (1:19 PM)\
\
Annareli, the datafile remembers the last line you read.\
\
From haiyingx to Everyone: (1:19 PM)\
\
_ is not used for future, so we can use _.\
\
From Annareli Morales to Everyone: (1:22 PM)\
\
9\
\
From Evan Meeker to Everyone: (1:22 PM)\
\
data[9]\
\
From Kevin Paul to Everyone: (1:22 PM)\
\
Correct!\
\
From Kevin Paul to Everyone: (1:22 PM)\
\
Oh.  I just gave it away.  :-)\
\
From AJ to Everyone: (1:24 PM)\
\
is there a way to find how many elements there are?\
\
From Kevin Paul to Everyone: (1:24 PM)\
\
Yes.  len(data) will tell you the length.\
\
From Seth McGinnis to Everyone: (1:25 PM)\
\
Can you omit indexes when slicing?  Does [:] mean the same thing as [0:-1]?\
(It does in some languages with similar syntax)\
\
From Kevin Paul to Everyone: (1:26 PM)\
\
Yes.  We\'92ll get to omitting some data.\
\
From Annareli Morales to Everyone: (1:26 PM)\
\
yes\
\
From Seth McGinnis to Everyone: (1:26 PM)\
\
Yes!\
\
From Imoleayo Ezekiel Gbode to Everyone: (1:26 PM)\
\
Please can you explain this again during the Q& A session     #-- read the first three lines (header)\uc0\u8232     for _ in range(3):\u8232         datafile.readline()\
\
From Kevin Paul to Everyone: (1:27 PM)\
\
That executes the \'93datafile.readline()\'94 command 3 times.\
Thus, it reads (and discards) the first 3 lines (the header) from the file.\
\
From Imoleayo Ezekiel Gbode to Everyone: (1:27 PM)\
\
Ok. Thanks\
\
From Kevin Paul to Everyone: (1:27 PM)\
\
You could have also had \'93x = datafile.readline()\'94 and then \'93print(x)\'94 to print out the header.\
\
From AJ to Everyone: (1:27 PM)\
\
The second is # of lines to print, not index right?  (which is why it's 10, not 9?)\
\
From Kevin Paul to Everyone: (1:27 PM)\
\
You\'92re welcome.\
It is the last index to get.\
\
From Joe Barsugli to Everyone: (1:28 PM)\
\
I\'92m getting \'93Unexpected EOF while parsing\'94 error.   I can\'92t figure out what is causing the script to fail\
\
From Kevin Paul to Everyone: (1:28 PM)\
\
And the last number is exclusive, so to read up to that index.\
\
From Colleen Petrik to Everyone: (1:28 PM)\
\
Why is [0:10] the first 10 elements, not 11?\
\
From AJ to Everyone: (1:28 PM)\
\
Wouldn't we have been printing 11 lines then if we did [1:10]?\
\
From Kevin Paul to Everyone: (1:28 PM)\
\
Joe.  Do you not have the data file?\
From the first session?\
\
From haiyingx to Everyone: (1:29 PM)\
\
AJ, we have to print [0:11]\
\
From Kevin Paul to Everyone: (1:29 PM)\
\
AJ:  No.  Python is 0 indexed, so 1 starts with the 2nd item.  And the :10 means read up to (but excluding) the 11th index.\
\
From Brian Mapes to Everyone: (1:29 PM)\
\
So [0:1] is just one value, same as [0]? who thought inclusive left, exclusive right was a sensible idea??\
\
From Kevin Paul to Everyone: (1:29 PM)\
\
Yes, Brian.\
No.  [0:1] returns a list of length 1.\
\
From Kevin Paul to Everyone: (1:30 PM)\
\
[0] returns the 1st actual item in the list.\
\
From Joe Barsugli to Everyone: (1:30 PM)\
\
It was working on earlier examples today, but something stopped working.\
\
From Seth McGinnis to Everyone: (1:30 PM)\
\
Brian - Guido van Rossum.  (The creator of Python)  ;)\
\
From Brian Mapes to Everyone: (1:30 PM)\
\
:O\
\
From Kevin Paul to Everyone: (1:30 PM)\
\
Joe:  Ugh!  Maybe we can diagnose after the session.\
\
From haiyingx to Everyone: (1:30 PM)\
\
Joe, you may download a fresh one.\
\
From Seth McGinnis to Everyone: (1:31 PM)\
\
Could you write down the problem we\'92re supposed to be solving?\
\
From L\'edvia Sancho to Everyone: (1:31 PM)\
\
Can you repeat the quiz, please!\
\
From Joe Barsugli to Everyone: (1:31 PM)\
\
No I think it is parsing the python script that is the problem.  Looks like my editor is in Python mode and is inserting tabs?\
\
From Kevin Paul to Everyone: (1:31 PM)\
\
Seth, we are going to end up (after the next session) writing code to compute the wind chill index.\
Joe.  That could be it.\
\
From Kelly McGarry to Everyone: (1:31 PM)\
\
why is it [:5] and not [:4]?\
\
From Seth McGinnis to Everyone: (1:32 PM)\
\
I just meant the mini-quiz.\
\
From haiyingx to Everyone: (1:32 PM)\
\
get the 5th, the first 5, and every other column of row 9 in the data object.\
\
From Kevin Paul to Everyone: (1:32 PM)\
\
Seth:  Oh.  I don\'92t know.  I\'92m spending all my time reading chat messages.\
\
From kong97@purdue.edu to Everyone: (1:33 PM)\
\
There is only 3 elements\
\
From Keith Lindsay to Everyone: (1:34 PM)\
\
A benefit of indexing that is inclusive left, exclusive right is that var[lo:mid]+var[mid:hi] is equal to var[lo:hi] (for lists).\
\
From haiyingx to Everyone: (1:34 PM)\
\
Joe, find all tab characters and change to space in your python script.\
\
From Kevin Paul to Everyone: (1:34 PM)\
\
Excellent answer, Keith!\
\
From Kelly McGarry to Everyone: (1:34 PM)\
\
Thanks @Keith!\
\
From Kevin Paul to Everyone: (1:35 PM)\
\
REMINDER:  You don\'92t need to execute any git commands, if you are just interested in learning Python.  Feel free to skip those commands, if you choose.\
Note that slice indexing (i.e., [start:stop]) doesn\'92t work with dictionaries!\
\
From Nick Lybarger to Everyone: (1:39 PM)\
\
it works with any individual list within the dictionary though, correct?\
\
From Kevin Paul to Everyone: (1:39 PM)\
\
Yes.\
\
From Nick Lybarger to Everyone: (1:40 PM)\
\
thanks\
\
From Kevin Paul to Everyone: (1:40 PM)\
\
It always works on lists.  This dictionary has keys that point to lists.\
(Or map to\'85)\
NOTE: data[\'91date\'92] is a list!  Even though data is dictionary.\
\
From Courtney to Everyone: (1:42 PM)\
\
How would you get the nth element from each member in a list of lists? (the earlier example of data[5:8][4] as something you can't do, since it's trying to get the 4th element of list of 3 lists, how would you get the 4th element from the 3 lists?)\
\
From raphy to Everyone: (1:42 PM)\
\
Can we save the output as .csv or .txt  file instead of reading the output on the python terminal?\
\
From Kevin Paul to Everyone: (1:42 PM)\
\
Courtney:  If you had a list of lists, you would do something like x[n][m].\
\
From Kevin Paul to Everyone: (1:43 PM)\
\
Courtney:  So, the 4th element from every list would need to be done with a for loop.\
\
From Courtney to Everyone: (1:43 PM)\
\
Ok thank you. Are for loops relatively efficient then?\
\
From Kevin Paul to Everyone: (1:43 PM)\
\
raphy:  Do you mean the print() output in the debug section?\
\
From raphy to Everyone: (1:44 PM)\
\
yes\
\
From Seth McGinnis to Everyone: (1:44 PM)\
\
Can lists hold different data types?\
\
From Kevin Paul to Everyone: (1:44 PM)\
\
Courtney:  loops in Python are actually not that efficient.  We\'92ll teach you how to do more efficient things later.\
\
From Jiaxu Zhang to Everyone: (1:44 PM)\
\
In the last section, it seems the line.split command split the datafile into \'93lines\'94. In the current example, it seems the data is split into \'93columns\'94. I\'92m confused.\
\
From Sheri Mickelson to Everyone: (1:44 PM)\
\
Seth: yes\
\
From Kevin Paul to Everyone: (1:45 PM)\
\
raphy:  Yes.  You can do \'93with open(filename, \'91w\'92) as f\'94 and then do \'93f.write(str(data))\'94 to write it to file.  But that won\'92t be formatted very well.\
\
From Jeff DLB to Everyone: (1:45 PM)\
\
What functions convert date-like and time-like strings to actual dates and times?\
\
From Kevin Paul to Everyone: (1:46 PM)\
\
Jeff DLB: loop up datetime objects in the Python dictionary.  Datetime objects have some functions that will do that for you.\
Look up (not loop up)\
\
From dfA1u0XB to Everyone: (1:46 PM)\
\
How do you read the only the 1st, 3rd, 6th, 9th, \'85\'85.. rows of a data.\
\
From haiyingx to Everyone: (1:46 PM)\
\
Using range(0,10,2)\
\
From perrotta to Everyone: (1:47 PM)\
\
Can a string of number be converted to a float then a float to int?\
\
From Kevin Paul to Everyone: (1:47 PM)\
\
dfA: There are lots of ways, but the easiest way (if the file is not too long) would be to read it into a list (like before) and using slice indexing: data[1::2]\
\
From haiyingx to Everyone: (1:47 PM)\
\
Yes, b=float(a), then c=int(b)\
\
From Kevin Paul to Everyone: (1:48 PM)\
\
Perrotta:  yes.\
\
From usbhatt to Everyone: (1:48 PM)\
\
Sorry if I missed it, but why do we delete the debug lines before the git commit?\
\
From Kevin Paul to Everyone: (1:48 PM)\
\
Just because we don\'92t need it to be saved.\
\
From raphy to Everyone: (1:48 PM)\
\
okay. So how do one format the output to a readable format?\
\
From Kevin Paul to Everyone: (1:48 PM)\
\
You can keep it if you want.\
\
From Cecile Hannay to Everyone: (1:48 PM)\
\
why do we have to do git add each time. The file should be in GitHub already. Can we just do git commit.\
\
From Kevin Paul to Everyone: (1:49 PM)\
\
Raphy: we\'92ll have to cover that later.\
There are lots of ways.\
Cecile:  git add\
\
From raphy to Everyone: (1:49 PM)\
\
I see. Thank you\
\
From Kevin Paul to Everyone: (1:49 PM)\
\
Adds the latest changes\
\
From John Ortega to Everyone: (1:49 PM)\
\
I'm confused why if the index "in range(3)" reads the whole file.  In mine, I only read the first 3 lines\
\
From Kevin Paul to Everyone: (1:49 PM)\
\
\'93Git add\'94 added the latest changes.\
John:  it doesn\'92t.  It only reads the first three lines.  You are right.\
Sorry that was miscommunicated.\
\
From Seth McGinnis to Everyone: (1:50 PM)\
\
Cecile: \'91git add\'92 is telling it which files you want to commit.  You can selectively commit some changes and not others.\
\
From Annareli Morales to Everyone: (1:50 PM)\
\
You have an extra aprostrophe in time!\
\
From Kevin Paul to Everyone: (1:50 PM)\
\
Good catch!\
\
From Kevin Paul to Everyone: (1:51 PM)\
\
Thanks, Seth!\
Good answer.\
\
From Nick Lybarger to Everyone: (1:52 PM)\
\
can lists be multidimensional, akin to a numpy array?\
\
From Kevin Paul to Everyone: (1:52 PM)\
\
You can have lists of lists of lists ....etc.\
But that\'92s not as efficient as numpy.\
We\'92ll cover numpy in a future tutorial(s).\
\
From Nick Lybarger to Everyone: (1:53 PM)\
\
thanks!\
\
From Kevin Paul to Everyone: (1:53 PM)\
\
You\'92re welcome!\
In this case, \'93str\'94 is the \'93function\'94 called str.\
\
From Kevin Paul to Everyone: (1:56 PM)\
\
\'85In this case, \'93t\'94 is a pointer to a function, so you are passing the actual function through via the types dictionary.\
NOTE:  No quotation marks!\
That means they are floats, not strings.\
\
From Joe Grim to Everyone: (1:58 PM)\
\
Thanks!\
\
From Daniele Visioni to Everyone: (1:58 PM)\
\
thank you!\
\
From Scott Meech to Everyone: (1:58 PM)\
\
Thanks!\
\
From Annareli Morales to Everyone: (1:58 PM)\
\
thank you!!\
\
From Swarnali to Everyone: (1:58 PM)\
\
thanks\
\
From deidre b to Everyone: (1:58 PM)\
\
thanks!\
\
From Hanli Liu to Everyone: (1:58 PM)\
\
Thank you!\
\
From Alexandra Ramos to Everyone: (1:58 PM)\
\
Thank you!\
\
From Courtney to Everyone: (1:58 PM)\
\
thank you!\
\
From usbhatt to Everyone: (1:58 PM)\
\
Thanks!\
\
From Kevin Paul to Everyone: (1:58 PM)\
\
We\'92ll stick around to answer some questions, too...\
\
From Seth McGinnis to Everyone: (1:58 PM)\
\
Thanks!\
\
Thanks\
\
Great job Julia!}